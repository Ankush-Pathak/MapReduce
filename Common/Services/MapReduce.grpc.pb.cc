// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MapReduce.proto

#include "MapReduce.pb.h"
#include "MapReduce.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MapReduce_method_names[] = {
  "/MapReduce/startMapReduce",
  "/MapReduce/getStatus",
};

std::unique_ptr< MapReduce::Stub> MapReduce::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapReduce::Stub> stub(new MapReduce::Stub(channel, options));
  return stub;
}

MapReduce::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_startMapReduce_(MapReduce_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatus_(MapReduce_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MapReduce::Stub::startMapReduce(::grpc::ClientContext* context, const ::Config& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Config, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startMapReduce_, context, request, response);
}

void MapReduce::Stub::async::startMapReduce(::grpc::ClientContext* context, const ::Config* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Config, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startMapReduce_, context, request, response, std::move(f));
}

void MapReduce::Stub::async::startMapReduce(::grpc::ClientContext* context, const ::Config* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startMapReduce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* MapReduce::Stub::PrepareAsyncstartMapReduceRaw(::grpc::ClientContext* context, const ::Config& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::Config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startMapReduce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* MapReduce::Stub::AsyncstartMapReduceRaw(::grpc::ClientContext* context, const ::Config& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartMapReduceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapReduce::Stub::getStatus(::grpc::ClientContext* context, const ::Empty& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatus_, context, request, response);
}

void MapReduce::Stub::async::getStatus(::grpc::ClientContext* context, const ::Empty* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void MapReduce::Stub::async::getStatus(::grpc::ClientContext* context, const ::Empty* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* MapReduce::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* MapReduce::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

MapReduce::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduce_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduce::Service, ::Config, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapReduce::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Config* req,
             ::Result* resp) {
               return service->startMapReduce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduce_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduce::Service, ::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapReduce::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Result* resp) {
               return service->getStatus(ctx, req, resp);
             }, this)));
}

MapReduce::Service::~Service() {
}

::grpc::Status MapReduce::Service::startMapReduce(::grpc::ServerContext* context, const ::Config* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapReduce::Service::getStatus(::grpc::ServerContext* context, const ::Empty* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MapperService_method_names[] = {
  "/MapperService/startMapper",
  "/MapperService/getStatus",
  "/MapperService/die",
};

std::unique_ptr< MapperService::Stub> MapperService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapperService::Stub> stub(new MapperService::Stub(channel, options));
  return stub;
}

MapperService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_startMapper_(MapperService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatus_(MapperService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_die_(MapperService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MapperService::Stub::startMapper(::grpc::ClientContext* context, const ::MapperConfigRequest& request, ::MapperResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MapperConfigRequest, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startMapper_, context, request, response);
}

void MapperService::Stub::async::startMapper(::grpc::ClientContext* context, const ::MapperConfigRequest* request, ::MapperResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MapperConfigRequest, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startMapper_, context, request, response, std::move(f));
}

void MapperService::Stub::async::startMapper(::grpc::ClientContext* context, const ::MapperConfigRequest* request, ::MapperResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startMapper_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MapperResult>* MapperService::Stub::PrepareAsyncstartMapperRaw(::grpc::ClientContext* context, const ::MapperConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MapperResult, ::MapperConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startMapper_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MapperResult>* MapperService::Stub::AsyncstartMapperRaw(::grpc::ClientContext* context, const ::MapperConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartMapperRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapperService::Stub::getStatus(::grpc::ClientContext* context, const ::Empty& request, ::MapperResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatus_, context, request, response);
}

void MapperService::Stub::async::getStatus(::grpc::ClientContext* context, const ::Empty* request, ::MapperResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void MapperService::Stub::async::getStatus(::grpc::ClientContext* context, const ::Empty* request, ::MapperResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MapperResult>* MapperService::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MapperResult, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MapperResult>* MapperService::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapperService::Stub::die(::grpc::ClientContext* context, const ::Empty& request, ::MapperResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_die_, context, request, response);
}

void MapperService::Stub::async::die(::grpc::ClientContext* context, const ::Empty* request, ::MapperResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_die_, context, request, response, std::move(f));
}

void MapperService::Stub::async::die(::grpc::ClientContext* context, const ::Empty* request, ::MapperResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_die_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MapperResult>* MapperService::Stub::PrepareAsyncdieRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MapperResult, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_die_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MapperResult>* MapperService::Stub::AsyncdieRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdieRaw(context, request, cq);
  result->StartCall();
  return result;
}

MapperService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapperService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapperService::Service, ::MapperConfigRequest, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MapperConfigRequest* req,
             ::MapperResult* resp) {
               return service->startMapper(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapperService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapperService::Service, ::Empty, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::MapperResult* resp) {
               return service->getStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapperService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapperService::Service, ::Empty, ::MapperResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::MapperResult* resp) {
               return service->die(ctx, req, resp);
             }, this)));
}

MapperService::Service::~Service() {
}

::grpc::Status MapperService::Service::startMapper(::grpc::ServerContext* context, const ::MapperConfigRequest* request, ::MapperResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapperService::Service::getStatus(::grpc::ServerContext* context, const ::Empty* request, ::MapperResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapperService::Service::die(::grpc::ServerContext* context, const ::Empty* request, ::MapperResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReducerService_method_names[] = {
  "/ReducerService/startReducer",
  "/ReducerService/getStatus",
  "/ReducerService/die",
};

std::unique_ptr< ReducerService::Stub> ReducerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReducerService::Stub> stub(new ReducerService::Stub(channel, options));
  return stub;
}

ReducerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_startReducer_(ReducerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatus_(ReducerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_die_(ReducerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReducerService::Stub::startReducer(::grpc::ClientContext* context, const ::ReducerConfigRequest& request, ::ReducerResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ReducerConfigRequest, ::ReducerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startReducer_, context, request, response);
}

void ReducerService::Stub::async::startReducer(::grpc::ClientContext* context, const ::ReducerConfigRequest* request, ::ReducerResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ReducerConfigRequest, ::ReducerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startReducer_, context, request, response, std::move(f));
}

void ReducerService::Stub::async::startReducer(::grpc::ClientContext* context, const ::ReducerConfigRequest* request, ::ReducerResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startReducer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ReducerResult>* ReducerService::Stub::PrepareAsyncstartReducerRaw(::grpc::ClientContext* context, const ::ReducerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ReducerResult, ::ReducerConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startReducer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ReducerResult>* ReducerService::Stub::AsyncstartReducerRaw(::grpc::ClientContext* context, const ::ReducerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartReducerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ReducerResult>* ReducerService::Stub::getStatusRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ReducerResult>::Create(channel_.get(), rpcmethod_getStatus_, context, request);
}

void ReducerService::Stub::async::getStatus(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::ReducerResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ReducerResult>::Create(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ReducerResult>* ReducerService::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ReducerResult>::Create(channel_.get(), cq, rpcmethod_getStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ReducerResult>* ReducerService::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ReducerResult>::Create(channel_.get(), cq, rpcmethod_getStatus_, context, request, false, nullptr);
}

::grpc::Status ReducerService::Stub::die(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_die_, context, request, response);
}

void ReducerService::Stub::async::die(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_die_, context, request, response, std::move(f));
}

void ReducerService::Stub::async::die(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_die_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ReducerService::Stub::PrepareAsyncdieRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_die_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ReducerService::Stub::AsyncdieRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdieRaw(context, request, cq);
  result->StartCall();
  return result;
}

ReducerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReducerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReducerService::Service, ::ReducerConfigRequest, ::ReducerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReducerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ReducerConfigRequest* req,
             ::ReducerResult* resp) {
               return service->startReducer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReducerService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ReducerService::Service, ::Empty, ::ReducerResult>(
          [](ReducerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::grpc::ServerWriter<::ReducerResult>* writer) {
               return service->getStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReducerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReducerService::Service, ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReducerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Empty* resp) {
               return service->die(ctx, req, resp);
             }, this)));
}

ReducerService::Service::~Service() {
}

::grpc::Status ReducerService::Service::startReducer(::grpc::ServerContext* context, const ::ReducerConfigRequest* request, ::ReducerResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReducerService::Service::getStatus(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::ReducerResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReducerService::Service::die(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HDFSService_method_names[] = {
  "/HDFSService/streamAppend",
  "/HDFSService/set",
  "/HDFSService/setStream",
  "/HDFSService/get",
  "/HDFSService/append",
  "/HDFSService/streamData",
  "/HDFSService/getMetaData",
  "/HDFSService/clear",
  "/HDFSService/die",
};

std::unique_ptr< HDFSService::Stub> HDFSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HDFSService::Stub> stub(new HDFSService::Stub(channel, options));
  return stub;
}

HDFSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_streamAppend_(HDFSService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_set_(HDFSService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setStream_(HDFSService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_get_(HDFSService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_append_(HDFSService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_streamData_(HDFSService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getMetaData_(HDFSService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_(HDFSService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_die_(HDFSService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::SetRequest>* HDFSService::Stub::streamAppendRaw(::grpc::ClientContext* context, ::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::SetRequest>::Create(channel_.get(), rpcmethod_streamAppend_, context, response);
}

void HDFSService::Stub::async::streamAppend(::grpc::ClientContext* context, ::Empty* response, ::grpc::ClientWriteReactor< ::SetRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::SetRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_streamAppend_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::SetRequest>* HDFSService::Stub::AsyncstreamAppendRaw(::grpc::ClientContext* context, ::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::SetRequest>::Create(channel_.get(), cq, rpcmethod_streamAppend_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::SetRequest>* HDFSService::Stub::PrepareAsyncstreamAppendRaw(::grpc::ClientContext* context, ::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::SetRequest>::Create(channel_.get(), cq, rpcmethod_streamAppend_, context, response, false, nullptr);
}

::grpc::Status HDFSService::Stub::set(::grpc::ClientContext* context, const ::SetRequest& request, ::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetRequest, ::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_, context, request, response);
}

void HDFSService::Stub::async::set(::grpc::ClientContext* context, const ::SetRequest* request, ::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetRequest, ::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_, context, request, response, std::move(f));
}

void HDFSService::Stub::async::set(::grpc::ClientContext* context, const ::SetRequest* request, ::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetResponse>* HDFSService::Stub::PrepareAsyncsetRaw(::grpc::ClientContext* context, const ::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetResponse, ::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetResponse>* HDFSService::Stub::AsyncsetRaw(::grpc::ClientContext* context, const ::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::SetRequest>* HDFSService::Stub::setStreamRaw(::grpc::ClientContext* context, ::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::SetRequest>::Create(channel_.get(), rpcmethod_setStream_, context, response);
}

void HDFSService::Stub::async::setStream(::grpc::ClientContext* context, ::Empty* response, ::grpc::ClientWriteReactor< ::SetRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::SetRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_setStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::SetRequest>* HDFSService::Stub::AsyncsetStreamRaw(::grpc::ClientContext* context, ::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::SetRequest>::Create(channel_.get(), cq, rpcmethod_setStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::SetRequest>* HDFSService::Stub::PrepareAsyncsetStreamRaw(::grpc::ClientContext* context, ::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::SetRequest>::Create(channel_.get(), cq, rpcmethod_setStream_, context, response, false, nullptr);
}

::grpc::Status HDFSService::Stub::get(::grpc::ClientContext* context, const ::GetRequest& request, ::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetRequest, ::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_, context, request, response);
}

void HDFSService::Stub::async::get(::grpc::ClientContext* context, const ::GetRequest* request, ::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetRequest, ::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void HDFSService::Stub::async::get(::grpc::ClientContext* context, const ::GetRequest* request, ::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetResponse>* HDFSService::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetResponse, ::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetResponse>* HDFSService::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HDFSService::Stub::append(::grpc::ClientContext* context, const ::SetRequest& request, ::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetRequest, ::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_append_, context, request, response);
}

void HDFSService::Stub::async::append(::grpc::ClientContext* context, const ::SetRequest* request, ::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetRequest, ::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_append_, context, request, response, std::move(f));
}

void HDFSService::Stub::async::append(::grpc::ClientContext* context, const ::SetRequest* request, ::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_append_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetResponse>* HDFSService::Stub::PrepareAsyncappendRaw(::grpc::ClientContext* context, const ::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetResponse, ::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_append_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetResponse>* HDFSService::Stub::AsyncappendRaw(::grpc::ClientContext* context, const ::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncappendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::StreamResponse>* HDFSService::Stub::streamDataRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::StreamResponse>::Create(channel_.get(), rpcmethod_streamData_, context, request);
}

void HDFSService::Stub::async::streamData(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::StreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::StreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_streamData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::StreamResponse>* HDFSService::Stub::AsyncstreamDataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::StreamResponse>::Create(channel_.get(), cq, rpcmethod_streamData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::StreamResponse>* HDFSService::Stub::PrepareAsyncstreamDataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::StreamResponse>::Create(channel_.get(), cq, rpcmethod_streamData_, context, request, false, nullptr);
}

::grpc::Status HDFSService::Stub::getMetaData(::grpc::ClientContext* context, const ::Empty& request, ::HDFSMetaData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::HDFSMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMetaData_, context, request, response);
}

void HDFSService::Stub::async::getMetaData(::grpc::ClientContext* context, const ::Empty* request, ::HDFSMetaData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::HDFSMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMetaData_, context, request, response, std::move(f));
}

void HDFSService::Stub::async::getMetaData(::grpc::ClientContext* context, const ::Empty* request, ::HDFSMetaData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMetaData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HDFSMetaData>* HDFSService::Stub::PrepareAsyncgetMetaDataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::HDFSMetaData, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMetaData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::HDFSMetaData>* HDFSService::Stub::AsyncgetMetaDataRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMetaDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HDFSService::Stub::clear(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_, context, request, response);
}

void HDFSService::Stub::async::clear(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, std::move(f));
}

void HDFSService::Stub::async::clear(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* HDFSService::Stub::PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* HDFSService::Stub::AsyncclearRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HDFSService::Stub::die(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_die_, context, request, response);
}

void HDFSService::Stub::async::die(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_die_, context, request, response, std::move(f));
}

void HDFSService::Stub::async::die(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_die_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* HDFSService::Stub::PrepareAsyncdieRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_die_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* HDFSService::Stub::AsyncdieRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdieRaw(context, request, cq);
  result->StartCall();
  return result;
}

HDFSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< HDFSService::Service, ::SetRequest, ::Empty>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::SetRequest>* reader,
             ::Empty* resp) {
               return service->streamAppend(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HDFSService::Service, ::SetRequest, ::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetRequest* req,
             ::SetResponse* resp) {
               return service->set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< HDFSService::Service, ::SetRequest, ::Empty>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::SetRequest>* reader,
             ::Empty* resp) {
               return service->setStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HDFSService::Service, ::GetRequest, ::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetRequest* req,
             ::GetResponse* resp) {
               return service->get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HDFSService::Service, ::SetRequest, ::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetRequest* req,
             ::SetResponse* resp) {
               return service->append(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HDFSService::Service, ::Empty, ::StreamResponse>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::grpc::ServerWriter<::StreamResponse>* writer) {
               return service->streamData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HDFSService::Service, ::Empty, ::HDFSMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::HDFSMetaData* resp) {
               return service->getMetaData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HDFSService::Service, ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Empty* resp) {
               return service->clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HDFSService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HDFSService::Service, ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HDFSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Empty* resp) {
               return service->die(ctx, req, resp);
             }, this)));
}

HDFSService::Service::~Service() {
}

::grpc::Status HDFSService::Service::streamAppend(::grpc::ServerContext* context, ::grpc::ServerReader< ::SetRequest>* reader, ::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::set(::grpc::ServerContext* context, const ::SetRequest* request, ::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::setStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::SetRequest>* reader, ::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::get(::grpc::ServerContext* context, const ::GetRequest* request, ::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::append(::grpc::ServerContext* context, const ::SetRequest* request, ::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::streamData(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::StreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::getMetaData(::grpc::ServerContext* context, const ::Empty* request, ::HDFSMetaData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::clear(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HDFSService::Service::die(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


